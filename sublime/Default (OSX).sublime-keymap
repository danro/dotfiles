[
  // common text editing binds
  { "keys": ["super+d"], "command": "duplicate_line" },
  { "keys": ["ctrl+d"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },
  { "keys": ["ctrl+c"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/Change Line.sublime-macro"} },
  { "keys": ["super+shift+f"], "command": "show_panel", "args": {"panel": "replace"} },
  { "keys": ["super+alt+f"], "command": "show_panel", "args": {"panel": "find_in_files"} },
  { "keys": ["super+v"], "command": "paste_and_indent" },
  { "keys": ["super+shift+v"], "command": "paste" },
  { "keys": ["super+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete to BOL.sublime-macro"} },

  // run default build system
  { "keys": ["super+r"], "command": "build" },

  // sublime linter error panel
  { "keys": ["ctrl+a"], "command": "sublime_linter_panel_toggle" },

  // expand selection
  { "keys": ["super+alt+g"], "command": "find_under_expand" },
  { "keys": ["super+alt+b"], "command": "find_under_expand_skip" },

  // goto file / command palette / switch project
  { "keys": ["super+t"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },
  { "keys": ["super+p"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },
  { "keys": ["alt+t"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"} },
  { "keys": ["super+shift+p"], "command": "show_overlay", "args": {"overlay": "command_palette"} },
  // { "keys": ["super+shift+p"], "command": "prompt_select_project" },

  // goto line number
  { "keys": ["super+l"], "command": "show_overlay", "args": {"overlay": "goto", "text": ":"} },

  // toggle sidebar
  { "keys": ["ctrl+s"], "command": "toggle_side_bar" },

  // expand selection to scope (or tag in html/xml)
  { "keys": ["ctrl+space"], "command": "expand_selection", "args": {"to": "scope"} },
  { "keys": ["ctrl+space"], "command": "expand_selection", "args": {"to": "tag"}, "context":
    [
      { "key": "selector", "operator": "equal", "match_all": true, "operand": "text.html, text.xml" },
      { "key": "selector", "operator": "not_equal", "operand": "string" }
    ]
  },

  // snippet commands
  { "keys": ["ctrl+v"], "command": "insert_snippet", "args":
    {"name": "Packages/User/snippets/js-template-variable.sublime-snippet"}
  },
  { "keys": ["ctrl+j"], "command": "insert_snippet", "args":
    {"name": "Packages/User/snippets/js-$jquery.sublime-snippet"}
  },
  { "keys": ["ctrl+/"], "command": "insert_snippet", "args":
    {"name": "Packages/User/snippets/php-?-tag.sublime-snippet"}
  },
  { "keys": ["ctrl+alt+/"], "command": "insert_snippet", "args":
    {"name": "Packages/User/snippets/php-?-comment.sublime-snippet"}
  },
  { "keys": ["ctrl+i"], "command": "insert_snippet", "args":
    {"name": "Packages/User/snippets/js-inspect.sublime-snippet"}
  },
  { "keys": ["ctrl+l"], "command": "insert_snippet", "args":
    {"name": "Packages/User/snippets/js-console-log.sublime-snippet"}
  },
  { "keys": ["ctrl+p"], "command": "insert_snippet", "args":
    {"name": "Packages/User/snippets/js-parse-int-10.sublime-snippet"}
  },
  { "keys": ["ctrl+enter"], "command": "insert_snippet", "args": {"contents": "<br>"}},

  // insert semicolon macro
  { "keys": ["super+;"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/Semicolon.sublime-macro"} },

  // replace an empty newline selection with semicolon
  { "keys": [";"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/Semicolon-Newline.sublime-macro"}, "context":
    [
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
      { "key": "text", "operator": "regex_contains", "operand": "\n", "match_all": true }
    ]
  },

  // add semicolon after newline in curly brackets {|}
  { "keys": ["super+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/Semicolon-Break{}.sublime-macro"}, "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
    ]
  },

  // add semicolon after newline in parens (|)
  { "keys": ["super+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/Semicolon-Break().sublime-macro"}, "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true }
    ]
  },

  // add trailing comma after js object methods
  { "keys": ["super+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/User/macros/Comma-Break.sublime-macro"}, "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": ": function\\(.*\\) \\{$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
    ]
  },

  // zen coding (emmet) remaps
  {
    "keys": ["ctrl+w"],
    "command": "expand_as_you_type",
    "context": [
      {
        "operand": false,
        "operator": "equal",
        "match_all": true,
        "key": "setting.is_widget"
      },
      {
        "match_all": true,
        "key": "emmet_action_enabled.expand_as_you_type"
      }
    ]
  },
  {
    "keys": ["ctrl+q"],
    "args": {
      "action": "remove_tag"
    },
    "command": "run_emmet_action",
    "context": [
      {
        "key": "emmet_action_enabled.remove_tag"
      }
    ]
  },

  // AdvancedNewFile: move/rename file
  { "keys": ["alt+super+m"], "command": "advanced_new_file", "args": {"rename": true}},

  // move tabs to group
  { "keys": ["super+1"], "command": "move_to_group", "args": { "group": 0 } },
  { "keys": ["super+2"], "command": "move_to_group", "args": { "group": 1 } },
  { "keys": ["super+3"], "command": "move_to_group", "args": { "group": 2 } },
  { "keys": ["super+4"], "command": "move_to_group", "args": { "group": 3 } },

  // disable ":" snippets
  // { "keys": [":"], "command": "insert_snippet", "args": {"contents": ":"} },

  // snippet helper snippet!
  { "keys": ["ctrl+f"], "command": "insert_snippet",
    "args": {"contents": "\\$\\{${1:1}:${2:$SELECTION}\\}"},
    "context": [{ "key": "selector", "operator": "equal", "operand": "source.json" }]
  },

  // disabled keys
  { "keys": ["ctrl+t"], "command": "noop" },
  // { "keys": ["ctrl+v"], "command": "noop" },
  { "keys": ["f5"], "command": "noop" },

  // alignment
  { "keys": ["super+ctrl+a"], "command": "alignment" },

  // Move by paragraph
  {"keys": ["ctrl+up"], "command": "move_by_paragraph", "args": {"forward": false}},
  {"keys": ["ctrl+down"], "command": "move_by_paragraph", "args": {"forward": true}},
  {"keys": ["ctrl+shift+up"], "command": "move_by_paragraph", "args": {"forward": false, "extend": true}},
  {"keys": ["ctrl+shift+down"], "command": "move_by_paragraph", "args": {"forward": true, "extend": true}},

  // Fin
  {}
]
