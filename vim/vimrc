" =====================================================================
" Vim configuration
" " ~/.vim/vimrc
" =====================================================================

" Init pathogen plugin
call pathogen#infect()
call pathogen#helptags()

" Don't beep
set visualbell

" Start without the toolbar
set guioptions-=T

" Make Vim less Vi-like
set nocompatible

" Line numbers & code folding
set number
set ruler
syntax on
set foldcolumn=1
set nofoldenable

" Whitespace stuff
set cindent
set tabstop=4
set shiftwidth=2
set softtabstop=2
set expandtab
set listchars=tab:\––
" set listchars=tab:\––,trail:\  
set list " Show invisibles
set formatoptions-=tcr "Don't autowrap or auto-comment
set textwidth=0 "Do not autowrap, really
set linebreak " Wrap lines at whole words
set ignorecase " ignore case when searching
set smartcase " Ignore case if search pattern is all lowercase
set wrap " Enable code wrapping

" Set encoding
set encoding=utf-8

" Disable backup behavior
set nobackup
set nowritebackup
set noswapfile

" Status bar options
set laststatus=2
set showcmd

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Wrapping in text and markdown files
function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Hammer<CR>
endfunction

" Mustache html snippets
au BufRead,BufNewFile *.mustache set ft=html.mustache

" Javascript js snippet shortcut
au BufRead,BufNewFile *.js set ft=javascript.js

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" Use modeline overrides
set modeline
set modelines=10

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Enable per-directory .vimrc files
set exrc
set secure

" CommandT options
let g:CommandTMaxHeight=10

